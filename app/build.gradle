import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.apache.tools.ant.types.Parameter
import org.apache.tools.ant.filters.BaseParamFilterReader

buildscript {
    ext {
        compose_ui_version = '1.4.3'
        camerax_version = '1.2.3'
        ktor_version = '2.3.11'
        protobuf_version = '3.23.4'
        hilt_version = '2.47'
        hilt_android_version = '1.0.0'
        lifecycle_version = '2.6.1'
    }
}

plugins {
    id 'com.android.application' version '8.9.0' apply false
    id 'com.android.library' version '8.9.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.10' apply false
    id "com.google.dagger.hilt.android" version "2.44" apply false
    id "com.google.protobuf" version "0.9.1" apply false
    id "org.openapi.generator" version "7.1.0"
}

tasks.register('api') {
    dependsOn tasks.modApi
}

tasks.register('modApi') {
    dependsOn tasks.genApi
    doLast {
        copy {
            from("$projectDir/build/generated/api")
            into("$projectDir/api")
            exclude("**/ValidationError.kt")
            exclude("**/ValidationErrorLocInner.kt")
            exclude("**/HTTPValidationError.kt")
            exclude("build.gradle")
            exclude("settings.gradle")
            filter { String line -> line.replace("import de.stustapay.api.models.HTTPValidationError", "") }
            filter { String line -> line.replace("import de.stustapay.api.models.AnyOfLessThanGreaterThan", "") }
            filter { String line -> line.replace("    val userPrivileges: AnyOfLessThanGreaterThan?,", "    val userPrivileges: kotlin.collections.List<Privilege>?,") }
            filter { String line -> line.replace("    val buttons: AnyOfLessThanGreaterThan?,", "    val buttons: kotlin.collections.List<TerminalButton>?,") }
            filter { String line -> line.replace("java.math.BigDecimal", "kotlin.Double") }
            filter { String line -> line.replace("kotlin.Double(\"0.0\")", "0.0") }
            filter { String line ->
                if (line.contains("kotlin.Int")) {
                    line.replace("kotlin.Int", "@Contextual com.ionspin.kotlin.bignum.integer.BigInteger")
                            .replace(" = 0", " = com.ionspin.kotlin.bignum.integer.BigInteger(0)")
                } else {
                    line
                }
            }
            filter { String line ->
                if (line.equals("package de.stustapay.api.apis")) {
                    line + "\n\nimport kotlinx.serialization.Contextual"
                } else {
                    line
                }
            }
        }

        copy {
            from("$projectDir/build/generated/api")
            into("$projectDir/api")
            include("build.gradle")
            filter(
                    ReplaceFilter,
                    find: "\nrepositories {\n    maven { url \"https://repo1.maven.org/maven2\" }\n}\n",
                    replace: ""
            )
            filter(
                    ReplaceFilter,
                    find: 'dependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n',
                    replace: 'dependencies {\n    implementation \"com.ionspin.kotlin:bignum:0.3.9\"\n    implementation \"com.ionspin.kotlin:bignum-serialization-kotlinx:0.3.2\"\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n'
            )
        }
    }
}

tasks.register('genApi', GenerateTask) {
    dependsOn tasks.cleanApi
    generatorName.set("kotlin")
    inputSpec.set("$projectDir/../api/terminalserver.json")
    outputDir.set("$projectDir/build/generated/api")
    skipValidateSpec.set(true)
    generateApiDocumentation.set(false)
    generateModelDocumentation.set(false)
    configOptions.set([library             : "jvm-ktor",
                       serializationLibrary: "kotlinx_serialization",
                       packageName         : "de.stustapay.api",
                       omitGradleWrapper   : "true"])
}

tasks.register('cleanApi') {
    doLast {
        delete("$projectDir/build/generated/api")
        delete("$projectDir/api")
    }
}

final class ReplaceFilter extends BaseParamFilterReader {
    String find
    String replace

    String contents
    int index

    ReplaceFilter(Reader reader) {
        super(reader)
        this.initialized = false
        this.contents = reader.readLines().join("\n")
        this.index = 0
    }

    @Override
    final int read() throws IOException {
        if (!this.getInitialized()) {
            this.initialize()
            this.setInitialized(true)
        }

        if (index < contents.length()) {
            index += 1
            return contents[index - 1]
        } else {
            return -1
        }
    }

    private void initialize() {
        Parameter[] params = this.getParameters();
        if (params != null) {
            for (int i = 0; i < params.length; i++) {
                if (params[i].getName() == "find") {
                    this.find = params[i].getValue()
                } else if (params[i].getName() == "replace") {
                    this.replace = params[i].getValue()
                }
            }
        }

        this.contents = this.contents.replace(this.find, this.replace)
    }
}