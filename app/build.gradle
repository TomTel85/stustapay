import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.apache.tools.ant.types.Parameter
import org.apache.tools.ant.filters.BaseParamFilterReader

buildscript {
    ext {
        kotlin_version = '2.1.10'
        compose_ui_version = '1.7.8'
        camerax_version = '1.4.1'
        ktor_version = '3.1.1'
        protobuf_version = '4.29.3'
        hilt_version = '2.55'
        hilt_android_version = '1.2.0'
        lifecycle_version = '2.8.7'
        bignum_version = '0.3.10'
        core_ktx_version = '1.15.0'
        preference_ktx_version = '1.2.1'
        navigation_compose_version = '2.8.8'
        activity_compose_version = '1.10.1'
        serialization_json_version = '1.8.0'
        targetJavaVersion = JavaVersion.VERSION_17
    }
}

plugins {
    id 'com.android.application' version '8.8.2' apply false
    id 'com.android.library' version '8.8.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.25' apply false
    id "org.jetbrains.kotlin.plugin.compose" version "$kotlin_version" apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.25' apply false
    // https://github.com/google/ksp/releases  must be the same as plugin.compose version!
    id 'com.google.devtools.ksp' version "$kotlin_version-1.0.31" apply false
    id "com.google.dagger.hilt.android" version "2.51.1" apply false
    id "com.google.protobuf" version "0.9.4" apply false
    id "org.openapi.generator" version "7.12.0"
}


tasks.register('api') {
    dependsOn tasks.modApi
}

tasks.register('modApi') {
    dependsOn tasks.genApi
    doLast {
        copy {
            from("$projectDir/build/generated/api")
            into("$projectDir/api")
            exclude("**/ValidationError.kt")
            exclude("**/ValidationErrorLocInner.kt")
            exclude("**/HTTPValidationError.kt")
            exclude("build.gradle")
            exclude("settings.gradle")
            filter { String line -> line.replace("import de.stustapay.api.models.HTTPValidationError", "") }
            filter { String line -> line.replace("import de.stustapay.api.models.AnyOfLessThanGreaterThan", "") }
            filter { String line -> line.replace("    val userPrivileges: AnyOfLessThanGreaterThan?,", "    val userPrivileges: kotlin.collections.List<Privilege>?,") }
            filter { String line -> line.replace("    val buttons: AnyOfLessThanGreaterThan?,", "    val buttons: kotlin.collections.List<TerminalButton>?,") }
            filter { String line -> line.replace("java.math.BigDecimal", "kotlin.Double") }
            filter { String line -> line.replace("kotlin.Double(\"0.0\")", "0.0") }
            filter { String line ->
                if (line.contains("kotlin.Int")) {
                    line.replace("kotlin.Int", "@Contextual com.ionspin.kotlin.bignum.integer.BigInteger")
                            .replace(" = 0", " = com.ionspin.kotlin.bignum.integer.BigInteger(0)")
                } else {
                    line
                }
            }
            filter { String line ->
                if (line.equals("package de.stustapay.api.apis")) {
                    line + "\n\nimport kotlinx.serialization.Contextual"
                } else {
                    line
                }
            }
        }

        copy {
            from("$projectDir/build/generated/api")
            into("$projectDir/api")
            include("build.gradle")
            filter(
                    ReplaceFilter,
                    find: "\nrepositories {\n    maven { url \"https://repo1.maven.org/maven2\" }\n}\n",
                    replace: ""
            )
            filter(
                    ReplaceFilter,
                    find: 'dependencies {\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n',
                    replace: 'dependencies {\n    implementation \"com.ionspin.kotlin:bignum:$bignum_version\"\n    implementation \"com.ionspin.kotlin:bignum-serialization-kotlinx:$bignum_version\"\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n'
            )
            filter { String line ->
                // we define this globally, and versions have to match. otherwise the api client has a different ktor version...
                line.replaceFirst("^\\s*(ext\\.ktor_version|ext\\.kotlin_version)\\s*=.*\$", "")
            }
            filter { String line ->
                // don't hardcode the version, use our global setting
                line.replaceFirst(
                        "implementation ['\"]org.jetbrains.kotlinx:kotlinx-serialization-json:[^\"']+[\"']",
                        'implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:\\$serialization_json_version"'
                )
            }
        }
    }
}

tasks.register('genApi', GenerateTask) {
    dependsOn tasks.cleanApi
    generatorName.set("kotlin")
    inputSpec.set("$projectDir/../api/terminalserver.json")
    outputDir.set("$projectDir/build/generated/api")
    generateApiTests.set(false)
    generateModelTests.set(false)
    skipValidateSpec.set(true)
    generateApiDocumentation.set(false)
    generateModelDocumentation.set(false)
    typeMappings.put("AnyType", "kotlin.Unit")   // otherwise it would be kotlin.Any
    configOptions.set([library             : "jvm-ktor",
                       serializationLibrary: "kotlinx_serialization",
                       packageName         : "de.stustapay.api",
                       omitGradleWrapper   : "true"])
}

tasks.register('cleanApi') {
    doLast {
        delete("$projectDir/build/generated/api")
        delete("$projectDir/api")
    }
}

final class ReplaceFilter extends BaseParamFilterReader {
    String find
    String replace

    String contents
    int index

    ReplaceFilter(Reader reader) {
        super(reader)
        this.initialized = false
        this.contents = reader.readLines().join("\n")
        this.index = 0
    }

    @Override
    final int read() throws IOException {
        if (!this.getInitialized()) {
            this.initialize()
            this.setInitialized(true)
        }

        if (index < contents.length()) {
            index += 1
            return contents[index - 1]
        } else {
            return -1
        }
    }

    private void initialize() {
        Parameter[] params = this.getParameters();
        if (params != null) {
            for (int i = 0; i < params.length; i++) {
                if (params[i].getName() == "find") {
                    this.find = params[i].getValue()
                } else if (params[i].getName() == "replace") {
                    this.replace = params[i].getValue()
                }
            }
        }

        this.contents = this.contents.replace(this.find, this.replace)
    }
}


ext.getSSPVersionCode = { ->
    def commitCount = "git -C ${rootDir} rev-list --count HEAD".execute().text.trim()

    return commitCount.toInteger()
}

ext.getSSPVersionName = { ->
    def versionDesc = "git -C ${rootDir} describe --tags --dirty --always".execute().text.trim()

    return versionDesc
}