/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.stustapay.api.apis

import kotlinx.serialization.Contextual

import de.stustapay.api.models.CancelOrderPayload
import de.stustapay.api.models.CompletedPayOut
import de.stustapay.api.models.CompletedSale
import de.stustapay.api.models.CompletedTicketSale
import de.stustapay.api.models.CompletedTopUp

import de.stustapay.api.models.NewPayOut
import de.stustapay.api.models.NewSale
import de.stustapay.api.models.NewTicketSale
import de.stustapay.api.models.NewTicketScan
import de.stustapay.api.models.NewTopUp
import de.stustapay.api.models.Order
import de.stustapay.api.models.PendingPayOut
import de.stustapay.api.models.PendingSale
import de.stustapay.api.models.PendingTicketSale
import de.stustapay.api.models.PendingTopUp
import de.stustapay.api.models.TicketScanResult

import de.stustapay.api.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class OrderApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * POST /order/book-payout
        * finish the pay out and book the transactions
        * 
         * @param newPayOut  
         * @return CompletedPayOut
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun bookPayout(newPayOut: NewPayOut): HttpResponse<CompletedPayOut> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newPayOut

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/book-payout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/book-sale
        * finish the sale and book the transactions
        * 
         * @param newSale  
         * @return CompletedSale
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun bookSale(newSale: NewSale): HttpResponse<CompletedSale> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newSale

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/book-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/book-ticket-sale
        * finish a ticket sale and book the transactions
        * 
         * @param newTicketSale  
         * @return CompletedTicketSale
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun bookTicketSale(newTicketSale: NewTicketSale): HttpResponse<CompletedTicketSale> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTicketSale

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/book-ticket-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/book-topup
        * finish the top up and book the transactions
        * 
         * @param newTopUp  
         * @return CompletedTopUp
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun bookTopup(newTopUp: NewTopUp): HttpResponse<CompletedTopUp> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTopUp

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/book-topup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/{order_id}/cancel
        * cancel information about an order
        * 
         * @param orderId  
         * @return kotlin.Unit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun cancelOrder(orderId: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger): HttpResponse<kotlin.Unit> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/{order_id}/cancel".replace("{" + "order_id" + "}", "$orderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/cancel-pending-ticket-sale
        * Mark a pending ticket sale as cancelled, e.g. because the sumup booking failed
        * 
         * @param cancelOrderPayload  
         * @return kotlin.Unit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun cancelPendingTicketSale(cancelOrderPayload: CancelOrderPayload): HttpResponse<kotlin.Unit> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = cancelOrderPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/cancel-pending-ticket-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/cancel-pending-topup
        * Mark a pending topup as cancelled, e.g. because the sumup booking failed
        * 
         * @param cancelOrderPayload  
         * @return kotlin.Unit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun cancelPendingTopup(cancelOrderPayload: CancelOrderPayload): HttpResponse<kotlin.Unit> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = cancelOrderPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/cancel-pending-topup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/check-payout
        * check if a pay out is valid
        * 
         * @param newPayOut  
         * @return PendingPayOut
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun checkPayout(newPayOut: NewPayOut): HttpResponse<PendingPayOut> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newPayOut

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/check-payout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/check-sale
        * check if a sale is valid
        * 
         * @param newSale  
         * @return PendingSale
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun checkSale(newSale: NewSale): HttpResponse<PendingSale> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newSale

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/check-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/check-ticket-sale
        * check if a ticket sale is valid
        * 
         * @param newTicketSale  
         * @return PendingTicketSale
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun checkTicketSale(newTicketSale: NewTicketSale): HttpResponse<PendingTicketSale> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTicketSale

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/check-ticket-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/check-ticket-scan
        * check if a ticket sale is valid
        * 
         * @param newTicketScan  
         * @return TicketScanResult
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun checkTicketScan(newTicketScan: NewTicketScan): HttpResponse<TicketScanResult> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTicketScan

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/check-ticket-scan",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/check-topup
        * check if a top up is valid
        * 
         * @param newTopUp  
         * @return PendingTopUp
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun checkTopup(newTopUp: NewTopUp): HttpResponse<PendingTopUp> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTopUp

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/check-topup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /order
        * list all orders
        * List all the order of the currently logged in Cashier
         * @return kotlin.collections.List<Order>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun listOrders(): HttpResponse<kotlin.collections.List<Order>> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/order",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/register-pending-ticket-sale
        * Register a pending topup with the server where the sumup payment is still pending
        * 
         * @param newTicketSale  
         * @return CompletedTicketSale
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun registerPendingTicketSale(newTicketSale: NewTicketSale): HttpResponse<CompletedTicketSale> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTicketSale

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/register-pending-ticket-sale",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /order/register-pending-topup
        * Register a pending topup with the server where the sumup payment is still pending
        * 
         * @param newTopUp  
         * @return CompletedTopUp
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun registerPendingTopup(newTopUp: NewTopUp): HttpResponse<CompletedTopUp> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = newTopUp

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/order/register-pending-topup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /order/{order_id}
        * get information about an order
        * 
         * @param orderId  
         * @return Order
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun show(orderId: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger): HttpResponse<Order> {

            val localVariableAuthNames = listOf<String>("OAuth2PasswordBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/order/{order_id}".replace("{" + "order_id" + "}", "$orderId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
