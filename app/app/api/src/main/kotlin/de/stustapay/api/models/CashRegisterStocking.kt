/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package de.stustapay.api.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param name 
 * @param nodeId 
 * @param id 
 * @param total 
 * @param euro200 
 * @param euro100 
 * @param euro50 
 * @param euro20 
 * @param euro10 
 * @param euro5 
 * @param euro2 
 * @param euro1 
 * @param cent50 
 * @param cent20 
 * @param cent10 
 * @param cent5 
 * @param cent2 
 * @param cent1 
 * @param variableInEuro 
 */
@Serializable

data class CashRegisterStocking (

    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "node_id")
    val nodeId: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger,

    @SerialName(value = "id")
    val id: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger,

    @Contextual @SerialName(value = "total")
    val total: kotlin.Double,

    @SerialName(value = "euro200")
    val euro200: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro100")
    val euro100: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro50")
    val euro50: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro20")
    val euro20: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro10")
    val euro10: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro5")
    val euro5: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro2")
    val euro2: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "euro1")
    val euro1: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent50")
    val cent50: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent20")
    val cent20: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent10")
    val cent10: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent5")
    val cent5: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent2")
    val cent2: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @SerialName(value = "cent1")
    val cent1: @Contextual com.ionspin.kotlin.bignum.integer.BigInteger? = com.ionspin.kotlin.bignum.integer.BigInteger(0),

    @Contextual @SerialName(value = "variable_in_euro")
    val variableInEuro: kotlin.Double? = 0.0

)

